name: Release

on:
  workflow_dispatch:
    inputs:
      level:
        description: 'Release level'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease

jobs:
  bump-and-build-version:
    runs-on: ubuntu-latest

    env:
      GRAFANA_API_KEY: $\{{ secrets.GRAFANA_API_SIGNING_KEY }} # Requires a Grafana API key from Grafana.com.

    outputs:
      version-tag: v$\{{ steps.bump-version.outputs.version }}
      upload-folder: $\{{ steps.metadata.outputs.upload-folder }}

    steps:
      - uses: tibdex/github-app-token@v1
        id: get_installation_token
        with:
          app_id: $\{{ secrets.DB_FE_GITHUB_APP_ID }}
          installation_id: $\{{ secrets.DB_FE_GITHUB_APP_INSTALLATION_ID }}
          private_key: $\{{ secrets.DB_FE_GITHUB_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          # Releases should always be made off of 'main'
          # TODO: Consider how to support making releases off of particular commit shas
          ref: 'main'
          token: $\{{ steps.get_installation_token.outputs.token }}
          fetch-depth: 0

      - name: Setup credentials to access Grafana private repositories
        run: git config --global url.https://$\{{ steps.get_installation_token.outputs.token }}@github.com/.insteadOf https://github.com/

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: lts/hydrogen

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'

      - name: Install utilities
        run: sudo apt-get install jq

      - name: Restore npm cache
        id: restore-npm-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
          key: $\{{ runner.os }}-npm-$\{{ hashFiles('**/package-lock.json', '!node_modules/**/package-lock.json') }}
          restore-keys: $\{{ runner.os }}-npm-

      - name: Install dependencies on cache miss
        run: {{ packageManagerInstallCmd }}
        if: steps.restore-npm-cache.outputs.cache-hit != 'true'

      - name: Save npm cache
        id: save-npm-cache
        if: steps.restore-npm-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            node_modules
          key: $\{{ steps.restore-npm-cache.outputs.cache-primary-key }}

      - name: Bump version
        id: bump-version
        run: |
          # Workaround for bug https://github.com/yarnpkg/berry/issues/4328
          echo "$\(jq 'del(.stableVersion)' package.json)" > package.json

          npm version $\LEVEL --no-git-tag-version

          export BUMPED_VERSION=$\(cat package.json | jq -r '.version')

          # Update the CHANGELOG to include the version we just created
          sed -i "s/^## 1.0.0 (Unreleased)\s*$\/## 1.0.0 (Unreleased)\n\n## v$\BUMPED_VERSION/" CHANGELOG.md

          # We want to stage files now so we don't have to worry about adding extra files later
          git add .

          echo "version=$\{BUMPED_VERSION}" >> $\GITHUB_OUTPUT
        env:
          LEVEL: $\{{ inputs.level }}

      - name: Lint frontend
        run: {{ packageManagerName }} run lint

      - name: Test frontend
        run: {{ packageManagerName }} run test:ci

      - name: Build frontend
        run: {{ packageManagerName }} run build

      - name: Warn missing Grafana API key
        run: |
          echo Please generate a Grafana API key: https://grafana.com/docs/grafana/latest/developers/plugins/sign-a-plugin/#generate-an-api-key
          echo Once done please follow the instructions found here: https://github.com/$\{{github.repository}}/blob/main/README.md#using-github-actions-release-workflow
        if: $\{{ env.GRAFANA_API_KEY == '' }}

      - name: Sign plugin
        run: {{ packageManagerName }} run sign
        if: $\{{ env.GRAFANA_API_KEY != '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          export GRAFANA_PLUGIN_ID=$\(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$\(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$\(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=$\{GRAFANA_PLUGIN_ID}-$\{GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=$\{GRAFANA_PLUGIN_ARTIFACT}.md5

          export GRAFANA_PLUGIN_ARTIFACT_LATEST=$\{GRAFANA_PLUGIN_ID}-latest.zip
          export GRAFANA_PLUGIN_ARTIFACT_LATEST_CHECKSUM=$\{GRAFANA_PLUGIN_ARTIFACT_LATEST}.md5

          echo "plugin-id=$\{GRAFANA_PLUGIN_ID}" >> $\GITHUB_OUTPUT
          echo "plugin-version=$\{GRAFANA_PLUGIN_VERSION}" >> $\GITHUB_OUTPUT
          echo "plugin-type=$\{GRAFANA_PLUGIN_TYPE}" >> $\GITHUB_OUTPUT
          echo "archive=$\{GRAFANA_PLUGIN_ARTIFACT}" >> $\GITHUB_OUTPUT
          echo "archive-checksum=$\{GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $\GITHUB_OUTPUT
          echo "archive-latest=$\{GRAFANA_PLUGIN_ARTIFACT_LATEST}" >> $\GITHUB_OUTPUT
          echo "archive-latest-checksum=$\{GRAFANA_PLUGIN_ARTIFACT_LATEST_CHECKSUM}" >> $\GITHUB_OUTPUT
          echo "upload-folder=__to-upload__" >> $\GITHUB_OUTPUT

      # confirm that the version in the plugin archive will match the tag we are on
      - name: Check package version
        run: if [ "v$\{{ steps.metadata.outputs.plugin-version }}" != "v$\{{ steps.bump-version.outputs.version }}" ]; then printf "\033[0;31mPlugin version doesn't match tag name\033[0m\n"; exit 1; fi

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist $\{{ steps.metadata.outputs.plugin-id }}
          zip $\{{ steps.metadata.outputs.archive }} $\{{ steps.metadata.outputs.plugin-id }} -r
          md5sum $\{{ steps.metadata.outputs.archive }} > $\{{ steps.metadata.outputs.archive-checksum }}

          # move assets to upload folder for mass upload
          mkdir $\{{ steps.metadata.outputs.upload-folder }}
          mv $\{{ steps.metadata.outputs.archive }} $\{{ steps.metadata.outputs.archive-checksum }} $\{{ steps.metadata.outputs.upload-folder }}/

      - name: Create latest zip
        id: latest-zip
        if: inputs.level != 'prerelease'
        run: |
          pushd $\{{ steps.metadata.outputs.upload-folder }}
          cp $\{{ steps.metadata.outputs.archive }} $\{{ steps.metadata.outputs.archive-latest }}
          md5sum $\{{ steps.metadata.outputs.archive-latest }} > $\{{ steps.metadata.outputs.archive-latest-checksum }}
          popd

      - name: Validate plugin
        run: |
          git clone https://github.com/grafana/plugin-validator
          pushd ./plugin-validator/pkg/cmd/plugincheck2
          go install
          popd
          plugincheck2 -config ./plugin-validator/config/default.yaml $\{{ steps.metadata.outputs.upload-folder }}/$\{{ steps.metadata.outputs.archive }}

      - name: Commit version bump
        id: commit-version-bump
        uses: grafana/github-api-commit-action@v0
        with:
          token: $\{{ steps.get_installation_token.outputs.token }}
          commit-message: 'chore(version): bump to version [$\{{ steps.bump-version.outputs.version }}] ($\{{ inputs.level }}) [BOT]'

      - name: Create tag
        uses: rickstaa/action-create-tag@v1
        with:
          commit_sha: $\{{ steps.commit-version-bump.outputs.commit-sha }}
          github_token: $\{{ steps.get_installation_token.outputs.token }}
          message: 'chore(tag): tag version $\{{ steps.bump-version.outputs.version }} [BOT]'
          tag: v$\{{ steps.bump-version.outputs.version }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: upload-dir
          path: $\{{ steps.metadata.outputs.upload-folder }}

  release-and-upload:
    runs-on: ubuntu-latest
    needs: ['bump-and-build-version']
    steps:
      - uses: tibdex/github-app-token@v1
        id: get_installation_token
        with:
          app_id: $\{{ secrets.DB_FE_GITHUB_APP_ID }}
          installation_id: $\{{ secrets.DB_FE_GITHUB_APP_INSTALLATION_ID }}
          private_key: $\{{ secrets.DB_FE_GITHUB_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          ref: $\{{ needs.bump-and-build-version.outputs.version-tag }}
          token: $\{{ steps.get_installation_token.outputs.token }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: upload-dir
          path: $\{{ needs.bump-and-build-version.outputs.upload-folder }}

      - name: Create Github release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: $\{{ inputs.level == 'prerelease' }}
          generate_release_notes: true
          files: |
            ./$\{{ needs.bump-and-build-version.outputs.upload-folder }}/**/*.zip?(.md5)
          tag_name: $\{{ needs.bump-and-build-version.outputs.version-tag }}

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '$\{{ secrets.GCP_DB_FE_CI_PRIVATE_KEY }}'

      - id: 'upload-to-gcs'
        name: 'Upload assets'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: ./$\{{ needs.bump-and-build-version.outputs.upload-folder }}
          destination: $\{{ steps.metadata.outputs.plugin-id }}
          parent: false
